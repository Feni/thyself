// Generated by CoffeeScript 1.4.0
(function() {
  var DetailEditView, DetailSummaryView, EntrySummaryView, ThyselfRouter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Thyself.Models.Detail = (function(_super) {

    __extends(Detail, _super);

    function Detail() {
      return Detail.__super__.constructor.apply(this, arguments);
    }

    Detail.prototype.defaults = {
      amount: "",
      type: "",
      group: ""
    };

    return Detail;

  })(Backbone.Model);

  Thyself.Models.Details = (function(_super) {

    __extends(Details, _super);

    function Details() {
      return Details.__super__.constructor.apply(this, arguments);
    }

    Details.prototype.model = Thyself.Models.Detail;

    return Details;

  })(Backbone.Collection);

  Thyself.Models.Entry = (function(_super) {

    __extends(Entry, _super);

    function Entry() {
      return Entry.__super__.constructor.apply(this, arguments);
    }

    Entry.prototype.defaults = {
      id: "",
      user_id: "",
      description: "",
      time: new Date(),
      metric: "",
      details: new Thyself.Models.Details()
    };

    Entry.prototype.urlRoot = '/api/v0/entries';

    Entry.prototype.pageUrl = function() {
      var cleanDesc, modelUrl;
      cleanDesc = this.get("description").replace(new RegExp("\\s", "g"), "-").replace(new RegExp("[^A-Za-z0-9_-]", "g"), "-").slice(0, 80);
      modelUrl = ("/u/" + (this.get('user_id'))) + ("/" + (this.get('time').getFullYear())) + ("/" + (this.get('time').getMonth() + 1)) + ("/" + (this.get('time').getDate())) + ("/m/" + ($.trim(this.get('metric')))) + ("/e/" + (this.get('id'))) + ("/" + ($.trim(cleanDesc)));
      return modelUrl;
    };

    return Entry;

  })(Backbone.Model);

  Thyself.Models.Entries = (function(_super) {

    __extends(Entries, _super);

    function Entries() {
      this.groupData = __bind(this.groupData, this);
      return Entries.__super__.constructor.apply(this, arguments);
    }

    Entries.prototype.model = Thyself.Models.Entry;

    Entries.prototype.url = "/api/v0/entries";

    Entries.prototype.groupData = function() {
      var groups, line, myGroup, myType, _i, _len, _ref;
      groups = {};
      _ref = this.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        myGroup = void 0;
        if (line.hasOwnProperty("group")) {
          myGroup = line.group;
        }
        if (!(group.hasOwnProperty(myGroup))) {
          group[myGroup] = {};
        }
        myType = void 0;
        if (line.hasOwnProperty("type")) {
          myType = line.type;
        }
        if (!(group[myGroup].hasOwnProperty(myType))) {
          group[myGroup][myType] = [];
        }
        group[myGroup][myType].push(line);
      }
      return group;
    };

    return Entries;

  })(Backbone.Collection);

  DetailSummaryView = (function(_super) {

    __extends(DetailSummaryView, _super);

    function DetailSummaryView() {
      this.initialize = __bind(this.initialize, this);
      return DetailSummaryView.__super__.constructor.apply(this, arguments);
    }

    DetailSummaryView.prototype.tagName = "li";

    DetailSummaryView.prototype.initialize = function(args) {
      return _.bindAll(this);
    };

    DetailSummaryView.prototype.render = function() {
      if (this.model.get("amount")) {
        $(this.el).html("<h5 class=\"val\">" + (this.model.get("amount")) + "</h5>\n<h5 class=\"key\">" + (this.model.get("type")) + "</h5>");
      } else {
        $(this.el).html("<h5 class=\"val\">" + (this.model.get("type")) + "</h5>\n<h5 class=\"key\">" + (this.model.get("group")) + "</h5>");
      }
      return this;
    };

    return DetailSummaryView;

  })(Backbone.View);

  EntrySummaryView = (function(_super) {

    __extends(EntrySummaryView, _super);

    function EntrySummaryView() {
      this.initialize = __bind(this.initialize, this);
      return EntrySummaryView.__super__.constructor.apply(this, arguments);
    }

    EntrySummaryView.prototype.tagName = "li";

    EntrySummaryView.prototype.initialize = function(args) {
      return _.bindAll(this);
    };

    EntrySummaryView.prototype.render = function() {
      var detailListElem, editEntryLink;
      editEntryLink = $("<a href=\"" + (this.model.pageUrl()) + "\"></a>");
      $(editEntryLink).append("<h2 class='fixed-width-3 column actionHeading'>" + (this.model.get("metric")) + "</h2>");
      detailListElem = $("<ul class='fixed-width-8 column actionDetails'></ul>");
      _(this.model.get("details").models).each(function(detail) {
        var detailView;
        detailView = new DetailSummaryView({
          model: detail
        });
        return detailListElem.append(detailView.render().el);
      }, this);
      $(editEntryLink).append(detailListElem);
      $(this.el).html(editEntryLink);
      $(this.el).addClass("actionInstance");
      return this;
    };

    return EntrySummaryView;

  })(Backbone.View);

  Thyself.Views.EntrySummaryListView = (function(_super) {

    __extends(EntrySummaryListView, _super);

    function EntrySummaryListView() {
      this.initialize = __bind(this.initialize, this);
      return EntrySummaryListView.__super__.constructor.apply(this, arguments);
    }

    EntrySummaryListView.prototype.initialize = function(args) {
      _.bindAll(this);
      return this.render();
    };

    EntrySummaryListView.prototype.render = function() {
      var item, _i, _len, _ref;
      $(this.el).html("");
      _ref = this.collection.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        $(this.el).append(new EntrySummaryView({
          model: item
        }).render().el);
      }
      return this;
    };

    return EntrySummaryListView;

  })(Backbone.View);

  DetailEditView = (function(_super) {

    __extends(DetailEditView, _super);

    function DetailEditView() {
      this.render = __bind(this.render, this);

      this.save = __bind(this.save, this);

      this.initialize = __bind(this.initialize, this);
      return DetailEditView.__super__.constructor.apply(this, arguments);
    }

    DetailEditView.prototype.tagName = "tr";

    DetailEditView.prototype.initialize = function() {
      $(this.el).unbind();
      return $(this.el).bind('change', this.save);
    };

    DetailEditView.prototype.save = function() {
      var newAmount, newGroup, newType;
      newAmount = $.trim($(this.el).find(".detailAmount").val());
      newType = $.trim($(this.el).find(".detailType").val());
      newGroup = $.trim($(this.el).find(".detailGroup").val());
      if (newAmount !== this.model.get("amount")) {
        this.model.set("amount", newAmount);
      }
      if (newType !== this.model.get("type")) {
        this.model.set("type", newType);
      }
      if (newGroup !== this.model.get("group")) {
        return this.model.set("group", newGroup);
      }
    };

    DetailEditView.prototype.render = function() {
      $(this.el).html("<td class=\"fixed-width-3 column\"><input type=\"text\" class=\"detailAmount fullInput\" maxlength=\"32\" value='" + (this.model.get("amount")) + "'/></td>\n<td class=\"fixed-width-3 column\"><input type=\"text\" class=\"detailType fullInput\" maxlength=\"120\" value='" + (this.model.get("type")) + "'/></td>\n<td class=\"fixed-width-3 column\"><input type=\"text\" class=\"detailGroup fullInput\" maxlength=\"32\" value='" + (this.model.get("group")) + "'/></td>\n<td class=\"fixed-width-2 column\"><button>Delete</button></td>");
      return this;
    };

    return DetailEditView;

  })(Backbone.View);

  Thyself.Views.EntryEditView = (function(_super) {

    __extends(EntryEditView, _super);

    function EntryEditView() {
      this.unrender = __bind(this.unrender, this);

      this.render = __bind(this.render, this);

      this.save = __bind(this.save, this);

      this.initialize = __bind(this.initialize, this);
      return EntryEditView.__super__.constructor.apply(this, arguments);
    }

    EntryEditView.prototype.el = $("#journal_entry");

    EntryEditView.prototype.initialize = function() {
      $(this.el).unbind();
      return $(this.el).bind('change', this.save);
    };

    EntryEditView.prototype.save = function() {
      var newAction, newDescription;
      newAction = $.trim($(this.el).find(".editAction").text());
      newDescription = $.trim($(this.el).find(".editDescription").text());
      if (newAction !== "") {
        this.model.set("metric", newAction);
      } else {
        $(this.el).find(".editAction").text(this.model.get("metric"));
        alert("Action cannot be empty");
      }
      if (newDescription !== this.model.get("description")) {
        this.model.set("description", newDescription);
      }
      return Thyself.Page.sidebarView.render();
    };

    EntryEditView.prototype.render = function() {
      var detailListElem, urlDate;
      urlDate = ("/u/" + (this.model.get('user_id'))) + ("/" + (this.model.get('time').getFullYear())) + ("/" + (this.model.get('time').getMonth() + 1)) + ("/" + (this.model.get('time').getDate()));
      $(this.el).html("<a href=\"" + urlDate + "\"> <h4 class=\"date\">" + (this.model.get('time').toDateString()) + "</h4></a>\n  <input type=\"text\" class=\"editAction\" placeholder=\"Action\" maxlength=\"32\" value='" + (this.model.get("metric")) + "'/>\n  <input type=\"text\" class=\"editDescription\" placeholder=\"Description\" maxlength=\"160\" value='" + (this.model.get("description")) + "'/>\n<p class=\"time\">" + (this.model.get("time").toTimeString()) + "</p>\n</hr>");
      detailListElem = $("<table class='width-full'>\n  <thead>\n  <tr>\n  <th class=\"fixed-width-3 column\">Amount</th>\n  <th class=\"fixed-width-3 column\">Type</th>\n  <th class=\"fixed-width-3 column\">Group</th>\n    </tr>\n    </thead>\n</table>");
      _(this.model.get("details").models).each(function(detail) {
        var detailView;
        detailView = new DetailEditView({
          model: detail
        });
        return detailListElem.append(detailView.render().el);
      }, this);
      $(this.el).append(detailListElem);
      $(this.el).append("<button>Add Details</button>");
      return this;
    };

    EntryEditView.prototype.unrender = function() {
      return $(this.el).remove();
    };

    return EntryEditView;

  })(Backbone.View);

  Thyself.Views.IndexView = (function(_super) {

    __extends(IndexView, _super);

    function IndexView() {
      return IndexView.__super__.constructor.apply(this, arguments);
    }

    IndexView.prototype.el = $("#journal_entry");

    IndexView.prototype.initialize = function() {
      return this.render();
    };

    IndexView.prototype.render = function() {
      return this;
    };

    return IndexView;

  })(Backbone.View);

  Thyself.Views.SettingsView = (function(_super) {

    __extends(SettingsView, _super);

    function SettingsView() {
      return SettingsView.__super__.constructor.apply(this, arguments);
    }

    SettingsView.prototype.el = $("#journal_entry");

    SettingsView.prototype.render = function() {
      $(this.el).html("Upgrade to Premium");
      return this;
    };

    return SettingsView;

  })(Backbone.View);

  Thyself.Views.JournalView = (function(_super) {

    __extends(JournalView, _super);

    function JournalView() {
      return JournalView.__super__.constructor.apply(this, arguments);
    }

    JournalView.prototype.el = $("#journal_entry");

    JournalView.prototype.initialize = function(user, year, month, day) {
      this.user = user;
      this.year = year;
      this.month = month;
      this.day = day;
      return this.render();
    };

    JournalView.prototype.render = function() {
      return $(this.el).html("Journal Entry for ");
    };

    return JournalView;

  })(Backbone.View);

  ThyselfRouter = (function(_super) {

    __extends(ThyselfRouter, _super);

    function ThyselfRouter() {
      this.journal = __bind(this.journal, this);

      this.settings = __bind(this.settings, this);

      this.index = __bind(this.index, this);
      return ThyselfRouter.__super__.constructor.apply(this, arguments);
    }

    ThyselfRouter.prototype.routes = {
      "": "index",
      "u": "settings",
      "u/:user/:year/:month/:day": "journal",
      "u/:user/:year/:month/:day/m/:metric_name/e/:entry_id/:entry_desc": "entrySummary"
    };

    ThyselfRouter.prototype.index = function() {
      var indexView;
      return indexView = new Thyself.Views.IndexView();
    };

    ThyselfRouter.prototype.settings = function() {
      var settingsView;
      settingsView = new Thyself.Views.SettingsView;
      return settingsView.render();
    };

    ThyselfRouter.prototype.journal = function(user, year, month, day) {
      var journalView;
      journalView = new Thyself.Views.JournalView(user, year, month, day);
      return jounalView.render();
    };

    ThyselfRouter.prototype.entrySummary = function(user, year, month, day, metric_name, entry_id, entry_desc) {
      var entry, entryView;
      entry = Thyself.Data.prefetch.get(entry_id);
      entryView = new Thyself.Views.EntryEditView({
        model: entry
      });
      return entryView.render();
    };

    return ThyselfRouter;

  })(Backbone.Router);

  $(document).delegate("a", "click", function(event) {
    var href, protocol;
    href = $(this).attr("href");
    protocol = this.protocol + "//";
    if (!event.altKey && !event.ctrlKey && !event.metaKey && !event.shiftKey) {
      if (href.slice(protocol.length) !== protocol && href.substring(0, 1) !== '#') {
        Thyself.router.navigate(href, {
          trigger: true
        });
        if ($("#journal_entry").html() === "") {
          return true;
        } else {
          event.preventDefault();
          return false;
        }
      }
    }
  });

  $("#mEntryForm").submit(function() {
    var actionUrl, descriptionField, entryFields, newEntry,
      _this = this;
    actionUrl = $(this).attr('action');
    newEntry = new Thyself.Models.Entry();
    if (actionUrl === '/i/demo/m') {
      newEntry.url = '/i/demo/m';
    }
    descriptionField = $(this).find("#description");
    entryFields = {
      description: descriptionField.val(),
      time: Math.round(new Date().getTime() / 1000)
    };
    newEntry.save(entryFields, {
      success: function(entry) {
        var detailsCollection, timeObj;
        console.log(entry.toJSON());
        timeObj = new Date(entry.get("time") * 1000);
        entry.set("time", timeObj);
        detailsCollection = new Thyself.Models.Details(entry.get("details"));
        entry.set("details", detailsCollection);
        Thyself.Page.sidebarView.collection.add(newEntry);
        return Thyself.Page.sidebarView.render();
      }
    });
    descriptionField.val("");
    return false;
  });

  Backbone.history.start({
    pushState: true
  });

  Thyself.router = new ThyselfRouter();

}).call(this);
